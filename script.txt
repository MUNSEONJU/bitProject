1. 
: 안녕하십니까, 앵귤러늅 조의 발표를맡게된 문선주입니다.
: 지금 스크린을 통해서 저희 작품 이름을 보고계십니다. 
: 아마 뉴비라는 말은 많이 들어보셨을텐데요. 초보자, 입문자라는 뜻으로 사용됩니다.
: 그렇다면 뉴비 앞의 ng는 무엇일까요?
: 아시는분도 계실지 모르지만 저희가 이번에 준비한 작품의 핵심 기술인 AngularJS 프레임워크의 상징과 같은 의미입니다.
: 그렇다면 AngularJS는 무엇일까요? 
: AngularJS는 JS에 MVC패턴을 적용한 프레임워크로 JS코드를 단순히 스크립트에서 모듈화 시켜 관리가 용이하고 코드양을 줄일수 있도록 웹 어플리케이션 개발자에게 필요한 기능들을 포함하고 있습니다.
: 이외에도 JS 프레임워크는 많이 있는데요. 

: 저희는 왜 하필 AngularJS를 선택했을까요? 지금부터 그 이유와 저희 작품에 대하여 설명하겠습니다.

2. 
: 지금 보고계신 장면은 MVC패턴이 적용된 JS 프레임워크나 라이브러리 중 가장 인지도 있는 4가지의의 세계 점유율을 나타낸 그래프입니다. 
: 2013년 초경에만 해도 다른 라이브러리에 비해 눈에 띄는 두각을 내진 않았는데요
: 일년도 채 되지 않는 기간동안 어마어마한 격차를 벌리게 된 모습을 확인할 수 있습니다.
: 이 그래프만 봐도 저희가 AngularJS를 선택한 이유가 어느정도는 설명될 것 같습니다.
: 저희 작품을 소개하기에 앞서 짧은 예제를 통하여 AngularJS의 장점을 소개하도록 하겠습니다.

3.
: input박스와 문단태그로만 이루어진 아주 간단한 예제입니다.
: input박스에 입력한 문장을 문단태그에 실시간으로 반영시키려 하는데요. 
//: 아주 단순한 작업이지만 입력된 정보를 읽어들여 다시 문단태그로 뿌리는 기능을 수행할 JS코드가 필요합니다.
//: JS를 다뤄보신분들은 알겠지만 html 요소들을 선택하고 제어하는 작업은 상당히 번거롭습니다.
/*: 때문에*/ 요즘 가장 흥하는 라이브러리중 하나인jQuery로 예제를 작성해보도록 하겠습니다.

4. 
: 네, jQuery를 통해 작성한 예제입니다.
: 위에서 부터 차례로 html 요소를 선택하고, 문단태그에 값을 대입하는 function을 추가하고, 키다운 이벤트를 걸어 키보드 입력할 때 마다 추가한 function을 수행하도록 코딩하였습니다. 우수한 라이브러리로서 인정받고있는 jQuery 조차 단순한 기능을 번거롭게 구현을 해줘야하는데요. 
: 다음은 AnuglarJS를 사용하여 동일한 기능을 구현해보도록 하겠습니다.

5. 
: 아.. 스크립트가 없네요. 이 코드는 스크립트는 없지만 방금전 jQuery에서 구현한 기능과 똑같이 작동합니다.
: 이 기능이 Angular에서 제공하는 가장 큰 기능중 하나인 양방향 바인딩인데요. html 요소가 실시간으로 메모리를 참조하고 갱신할 수 있습니다. 
: 방금 보신 기능은 정말 일부분에 불과하며, 이처럼 개발자가 필요로하는 기능들을 친절하게 대신 수행해주는, 아주 똑똑한 프레임워크입니다.

6. 
: 다만 html에서 볼 수 없는 생소한 문법들이 보입니다.
: 저희 작품명에서도 볼 수 있는 ng라는 키워드가 포함되어있습니다.
: 앞서 보신 편리한 기능을 사용하려면 AngularJS에서 지정한 규칙을 알아야만 합니다.

7. 
: 아.. 여기서 치명적인 단점이 발생하게됩니다. 숙련된 JS개발자라면 습득하는데 큰 어려움이 없을테지만
: 우리처럼 이제 막 개발에 발을 들인 초보자. 뉴비들에게는 진입장벽이 좀.. 높은편입니다.
: 실제로 저희도 제작기간 2달중 한달정도는 전혀 감도못잡고있었습니다. 
: 자바스크립트 배운지도 얼마 안됐거든요
: 단순히 도전정신만으로 진행하기에 겁도많이났습니다
: 이러한 문제점을 인지하고 나니 저희 작품의 진행 방향도 좀더 명확해 졌습니다. 
: 뉴비개발자 들도 AngularJS로 편하게 코딩하자, Angular 써봐라, 이것이 저희 작품이 전하고자 하는 메세지입니다.

8. 
: 개발기간동안 저희가 겪은 시행착오들을 바탕으로 뉴비들이 좀 더 쉽게 Angular에 접할 수 있도록 
: 간단한 예제들과 작업공간을 제작하였습니다.
: 그럼 저희 작품의 인터페이스에 관하여 간단히 소개하도록 하겠습니다.

9. 
: 첫번째로 에디터부분입니다. 
: 에디터에 코드를 작성하면 오른쪽 흰색 결과창에 결과가 출력됩니다.
: 에디터는 html 에디터와 JS에디터가 준비되어있고, JS를 따로 HTML에 삽입하지 않아도 해당 JS가 적용된 결과가 출력됩니다.

10.  
: 결과창 위에 두개의 버튼이 있는데요. 
: 노란색 refresh버튼을 통해 브라우저의 새로고침 기능을 수행할 수 있습니다. 
: 현재 예제의 inputbox에 텍스트를 입력한 후 새로고침을 하게되면 아무것도 입력되지 않은 상태로 되돌아가겠죠
: 그다음 파란색 최대화 버튼을 누르게되면

11. 
: 결과창을 최대화시켜 큰화면에서 결과를 확인할 수 있도록 합니다. 
: 그리고 최대화 버튼이 붉은색 최소화 버튼으로 바뀐 모습 확인할 수 있습니다.
: 그런데 우측 하단에 보면 붉은색으로 뭔가 글자가 표시되어있는데요

12. 
: 바로 JS의 오류내용을 출력하는 부분입니다.
: 입력된 JS코드를 실시간으로 검사하여 작업하는 동시에 오류발생을 확인할 수 있도록 만들었습니다.

13. 
: 다음으로 소개할 부분은 예제메뉴입니다
: AnJS를 사용하는데 있어 가장 기본적인 개념들을 익힐 수 있도록 직접 작성한 예제와
: 예제만으로 소화할 수 없는 이론적인 부분을 도움말 형식으로 제공하는데 이부분은 시연영상에서 부가적으로 소개하도록 하겠습니다.

: 화면 상단에 보게되면 버튼이 다섯개 있는 것을 확인하실 수 있습니다.

14. 
: 맨 첫번째 톱니모양버튼으로 에디터의 세부 설정을 다룰 수 있습니다.
: 에디터 테마, 폰트사이즈처럼 에디터에 대한 설정을 다루며
: 기능에 관한 부분은 역시 시연영상에서 다루도록 하겠습니다.

15. cdn 설명, 라이브러리적용
: 그다음 구름모양 버튼으로 CDN창이 열렸는데요
: CDN은 html 문서 내에 외부 css나 js 라이브러리를 url을 통해 주입시키는 개념을 말합니다.
: CDN 메뉴를 통해 예제에 필요하거나 가장 자주 쓰이는 jQuery 그리고 Bootstrap 라이브러리가 포함되어있으며
: 기존의 html 문서 내에 url을 삽입하여 라이브러리를 적용하는 번거로운 방법을 쓰지 않아도 버튼조작만으로 라이브러리를 삽입할 수 있습니다.

16. 새로운 문서, 저장, 코드다운로드

----
비디오 스크립트
* 0:00 (기본 기능 소개.) 
 :뒷쪽에서 설명 할 dynamic result기능으로 결과가 실시간으로 적용.

* 0:24 (오류발생)
 : 어시스트
 :스크립트 작성중 오류창 발생. 스크립트가 정상적으로 작성을 하지 않은 경우 실제로 개발자 도구 콘솔에서 확인할 수 있는 오류메세지가 출력된다. 또한 dynamic result 기능이 작동중이기 때문에 오류체크도 실시간으로.

* 0:33 (함수형식완성->오류사라짐)
 : 가장 쉽게 자바스크립트 작동 여부를 알 수 있는 alert명령 입력후 수행

* 0:44 (에디터 세팅)
 : 다음으로 에디터 세부 설정 기능 

* 0:48 (테마)
 : 기본적으로 많이 알려진 테마들을 적용할 수 있다. 적용하지않는다면 기본적으로 monokai 테마가 적용되어있다.

* 0:58 (폰트사이즈)
 : 폰트사이즈가 빠질 수는 없을것이다.

* 1:15 (탭사이즈)
 : 폰트사이즈 아래쪽에 위치한 탭사이즈 역시 개발도구라면 빠져서는 안되는 기능이기에 적용

V* 1:28 (dynamic result)
 : 앞서 소개했던 dynamic result 즉 결과를 실시간으로 확인할 수 있는 기능.
 : 브라우저는 html태그와 html태그 사이의 태그들을 읽어 렌더링을 하여 html 문서를 그리게 된다. html 안의 html태그들을 또하나의 문서로 인식하기 위해 iframe 태그를 사용하였으며 iframe 안에서 별도의 html 문서로서 에디터 안의 태그들을 렌더링한다.


V* 1;39 (에러)
 : 역시 먼저 설명했었던 에러체크, 개발자 도구의 콘솔창에 출력되는 메세지 중 에러 정보만을 얻어 사용자의 작업환경에 뿌려준다. 
 : 기존의 브라우저에 있는 개발자 도구는 무척 편리하지만 기존 로컬 작업 환경에서 작성한 웹 페이지를 브라우저에서 실행시켜 만일 원하는 결과가 출력되지 않는 경우, 혹은 정상적으로 출력되지만 오류가 있음에도 확인하지 못하는 경우 등의 맹점이 있다. 스크립트에 치명적인 오류가 있다면 작업환경에서 실시간으로 오류를 확인할 수 있다는 점이 에디터의 큰 기능중 하나
 : 하지만 dynamic result를 적용한 결과 출력이나 오류검출은 그만큼의 작업양을 요하기 때문에 사용자가 경우에따라 적합한 설정을 할 수 있도록 설정 기능을 주었다.

V * 1:48 (에디터 on off)
 : 스크립트가 불필요한 페이지 이거나 스크립트를 html 부분에서 작성하는 경우, 에디터 공간을 좀더 넓게 활용할 수 있음. 실제로 js 코드를 없애버리지 않고 단순히 js 코드를 적용하지 않음. 다시 에디터를 켜면 스크립트 내용이 살아 있음.

* 1;56 (cdn)
 : cdn은 웹페이지에 import시킬 외부 js나 css 라이브러리를 서버에 직접 올리지 않고 url을 통해 얻어오는 것. 
 : 예문의 버튼 안에 수식이 들어있다. jsp의 표현식과 유사한 angular의 표현식이다.
* 2:00
 : angularjs 프레임워크 cdn을 켜면 표현식이 정상적으로 작동한 모습을 볼 수 있다.
 : 또한 버튼의 클래스명을 부트스트랩의 버튼 클래스명으로 지정해 두었는데
* 2:06
 : 부트 스트랩 cdn 역시 정상적으로 작동한다.
 : 가장 흔하게 사용하는 라이브러리 조차 cdn의 주소를 따로 복사해 두거나, 매번 해당 사이트에 방문하여 cdn을 복사해 와야 했다. 이러한 번거로움을 최소화 하기위해 가장 많이 쓰일 cdn을 html에 입력하지 않고 적용할 수 있도록 했으며, 물론 본문에 직접 cdn을 적용시켜도 정상적으로 작동한다.

* 2:14 (예제)
 : 다음은 우리가 기본적으로 제공하는 예제들이다.
 : 좌측 아코디언 메뉴에 예제 종류별로 모여있으며
* 2:19
 : 해당 예제를 에디터로 불러올 수 있다.
* 2:24
 : 또한 예제가 설명하고자 하는 내용을 간략하게 정리하여 예제로는설명할 수 없는 이론부분을 수록하였다.
* 2:36 
 : 예제를 불러왔다면 좌측 예제 네비게이션 부분을 숨겨 작업공간을 좀더 넓게 사용할 수 있다

* 2:50(저장)
 : 작업이 끝나지 않았거나 작업내용을 누군가와 공유하고싶다 등 저장이 필요한 경우를 위해 저장/불러오기 기능을 제공한다.
* 2:59 
 : 저장하고 불러오기 기능에 관하여는 시스템 구조 부분에서 좀더 다룰것이다. 
* 3:01 
 : url에 사용자의 작업 id를 함께 입력하여 요청하면 좀전에 저장했던 작업이 그대로 불러와진다.또한 작업 id는 중복되어 먼저 저장된 작업을 잃지 않도록 하였다.
* 3:11
 : 저장/불러오기 기능은 본문만이 아니라 앞서 설명했던 에디터 설정. 폰트사이즈나 탭사이즈.. 그리고 적용된 cdn 정보까지 json형식의 객체로 받아 설정해 준다.
* 3:18
 : 만일 존재하지 않는 임의의 id를 요청해보겠다
* 3:25 
 : 보시는것처럼 존재하지 않는 id임을 사용자에게 알리는 경고창을 띄운다.

* 3:32 (다운로드)
 : 간단한 웹 페이지 테스트를 위한 에디터이기 때문에 큰 웹 어플리케이션을 만들기는 문제가 있다. 작업물을 html,js 파일로 다운로드 가능하게 해준다.
* 3:57
 : 작업중인 내용과 더불어 문서 본문에는 입력하지 않았지만 cdn이 적용되어 있는 문서를 만들었다. 또한 html 문서는 html이나 head태그를 생략한 최소한의 태그만이 들어가 있다.
* 4:05 
 : 다운로드 윈도우가 열리고 원하는 경로에 저장을 한다.
* 4:17
 : html과 js파일이 함께 압축되어 다운로드가 되었다. 다운로드된 문서를 확인해보면 body태그밖에 없던 불완전한 html 문서를 html5 형식에 맞게 최소한의 형식을 갖추도록 하였으며 cdn url도 문제없이 head 태그 안에 적용된 것을 확인할 수 있다.
 : js 에디터 부분에 작성하였던 스크립트는 body 태그 끝나는 지점에 append 시켜 문제없이 스크립트가 작동하도록 하였다.