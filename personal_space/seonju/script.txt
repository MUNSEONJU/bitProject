1. 인사 및 프로젝트 소개

2. JS 프레임워크/라이브러리
 : 웹 사이트들이 웹 어플리케이션으로 변화하게 되면서 JS의 사용량이 급증하게 되고, 그에맞춰 수많은  라이브러리나 프레임워크들이 등장. 가장 유명한 예로 jQuery. 프로그램 언어에 가까운 인지도를 가짐
 : jQuery와같은 유틸리티성 라이브러리도 있지만 프론트엔드에 MVC패턴을 적용한 프레임워크 등장 편리한 웹 어플리케이션 개발. 그러한 프레임워크들의 세계 점유현황
 : 국내 인지도 및 해외 인지도에 관한 설명

3. AngularJS?
 : 왜 AngularJS를 선택하였는가.

4. Angularjs 문제점
 : AngularJS는 편리한 프레임워크임은 검증되었고 분명한 사실이지만, 하나의 언어라고 봐도 무방할 정도로 구조화 되어있기 때문에 프론트엔드 개발에 익숙치않은 초보개발자들에게는 용어부터 생소. 진입장벽 높음
 : 프로젝트 진행을 위해 AngularJS 서적을 찾았으나 국내에 정식 발매된 서적은 총 3권. 그중 한권은 외서 번역. 전세계 점유율을 떠올려보면 우리나라에서의 인지도를 가늠할 수 있음

5. 해결책 
 : 구상한 프로젝트를 진행하기 위해서 우리도 처음부터 AngularJS를 공부해야 했고, 그동안 느낀 부분을 담아 만든 것이 ngNewbie
 : 처음 AngularJS를 사용하는데 있어 필수로 알아야 할 부분의 예제와 설명을 제공.
 : 어찌되었건 직접 코딩을 해봐야 하기 때문에 작업공간 필요. 제공.

6. 에디터ui설명
 ; HTML, JS
 : 우측 결과창

7. 결과창 확대

----
비디오 스크립트
* 0:00 (기본 기능 소개.) 
 :뒷쪽에서 설명 할 dynamic result기능으로 결과가 실시간으로 적용.

* 0:24 (오류발생)
 :스크립트 작성중 오류창 발생. 스크립트가 정상적으로 작성을 하지 않은 경우 실제로 개발자 도구 콘솔에서 확인할 수 있는 오류메세지가 출력된다. 또한 dynamic result 기능이 작동중이기 때문에 오류체크도 실시간으로.

* 0:33 (함수형식완성->오류사라짐)
 : 가장 쉽게 자바스크립트 작동 여부를 알 수 있는 alert명령 입력후 수행

* 0:44 (에디터 세팅)
 : 다음으로 에디터 세부 설정 기능 

* 0:48 (테마)
 : 기본적으로 많이 알려진 테마들을 적용할 수 있다. 적용하지않는다면 기본적으로 monokai 테마가 적용되어있다.

* 0:58 (폰트사이즈)
 : 폰트사이즈가 빠질 수는 없을것이다.

* 1:15 (탭사이즈)
 : 폰트사이즈 아래쪽에 위치한 탭사이즈 역시 개발도구라면 빠져서는 안되는 기능이기에 적용

V* 1:28 (dynamic result)
 : 앞서 소개했던 dynamic result 즉 결과를 실시간으로 확인할 수 있는 기능.
 : 브라우저는 html태그와 html태그 사이의 태그들을 읽어 렌더링을 하여 html 문서를 그리게 된다. html 안의 html태그들을 또하나의 문서로 인식하기 위해 iframe 태그를 사용하였으며 iframe 안에서 별도의 html 문서로서 에디터 안의 태그들을 렌더링한다.


V* 1;39 (에러)
 : 역시 먼저 설명했었던 에러체크, 개발자 도구의 콘솔창에 출력되는 메세지 중 에러 정보만을 얻어 사용자의 작업환경에 뿌려준다. 
 : 기존의 브라우저에 있는 개발자 도구는 무척 편리하지만 기존 로컬 작업 환경에서 작성한 웹 페이지를 브라우저에서 실행시켜 만일 원하는 결과가 출력되지 않는 경우, 혹은 정상적으로 출력되지만 오류가 있음에도 확인하지 못하는 경우 등의 맹점이 있다. 스크립트에 치명적인 오류가 있다면 작업환경에서 실시간으로 오류를 확인할 수 있다는 점이 에디터의 큰 기능중 하나
 : 하지만 dynamic result를 적용한 결과 출력이나 오류검출은 그만큼의 작업양을 요하기 때문에 사용자가 경우에따라 적합한 설정을 할 수 있도록 설정 기능을 주었다.

V * 1:48 (에디터 on off)
 : 스크립트가 불필요한 페이지 이거나 스크립트를 html 부분에서 작성하는 경우, 에디터 공간을 좀더 넓게 활용할 수 있음. 실제로 js 코드를 없애버리지 않고 단순히 js 코드를 적용하지 않음. 다시 에디터를 켜면 스크립트 내용이 살아 있음.

* 1;56 (cdn)
 : cdn은 웹페이지에 import시킬 외부 js나 css 라이브러리를 서버에 직접 올리지 않고 url을 통해 얻어오는 것. 
 : 예문의 버튼 안에 수식이 들어있다. jsp의 표현식과 유사한 angular의 표현식이다.
* 2:00
 : angularjs 프레임워크 cdn을 켜면 표현식이 정상적으로 작동한 모습을 볼 수 있다.
 : 또한 버튼의 클래스명을 부트스트랩의 버튼 클래스명으로 지정해 두었는데
* 2:06
 : 부트 스트랩 cdn 역시 정상적으로 작동한다.
 : 가장 흔하게 사용하는 라이브러리 조차 cdn의 주소를 따로 복사해 두거나, 매번 해당 사이트에 방문하여 cdn을 복사해 와야 했다. 이러한 번거로움을 최소화 하기위해 가장 많이 쓰일 cdn을 html에 입력하지 않고 적용할 수 있도록 했으며, 물론 본문에 직접 cdn을 적용시켜도 정상적으로 작동한다.

* 2:14 (예제)
 : 다음은 우리가 기본적으로 제공하는 예제들이다.
 : 좌측 아코디언 메뉴에 예제 종류별로 모여있으며
* 2:19
 : 해당 예제를 에디터로 불러올 수 있다.
* 2:24
 : 또한 예제가 설명하고자 하는 내용을 간략하게 정리하여 예제로는설명할 수 없는 이론부분을 수록하였다.
* 2:36 
 : 예제를 불러왔다면 좌측 예제 네비게이션 부분을 숨겨 작업공간을 좀더 넓게 사용할 수 있다

* 2:50(저장)
 : 작업이 끝나지 않았거나 작업내용을 누군가와 공유하고싶다 등 저장이 필요한 경우를 위해 저장/불러오기 기능을 제공한다.
* 2:59 
 : 저장하고 불러오기 기능에 관하여는 시스템 구조 부분에서 좀더 다룰것이다. 
* 3:01 
 : url에 사용자의 작업 id를 함께 입력하여 요청하면 좀전에 저장했던 작업이 그대로 불러와진다.또한 작업 id는 중복되어 먼저 저장된 작업을 잃지 않도록 하였다.
* 3:11
 : 저장/불러오기 기능은 본문만이 아니라 앞서 설명했던 에디터 설정. 폰트사이즈나 탭사이즈.. 그리고 적용된 cdn 정보까지 json형식의 객체로 받아 설정해 준다.
* 3:18
 : 만일 존재하지 않는 임의의 id를 요청해보겠다
* 3:25 
 : 보시는것처럼 존재하지 않는 id임을 사용자에게 알리는 경고창을 띄운다.

* 3:32 (다운로드)
 : 간단한 웹 페이지 테스트를 위한 에디터이기 때문에 큰 웹 어플리케이션을 만들기는 문제가 있다. 작업물을 html,js 파일로 다운로드 가능하게 해준다.
* 3:57
 : 작업중인 내용과 더불어 문서 본문에는 입력하지 않았지만 cdn이 적용되어 있는 문서를 만들었다. 또한 html 문서는 html이나 head태그를 생략한 최소한의 태그만이 들어가 있다.
* 4:05 
 : 다운로드 윈도우가 열리고 원하는 경로에 저장을 한다.
* 4:17
 : html과 js파일이 함께 압축되어 다운로드가 되었다. 다운로드된 문서를 확인해보면 body태그밖에 없던 불완전한 html 문서를 html5 형식에 맞게 최소한의 형식을 갖추도록 하였으며 cdn url도 문제없이 head 태그 안에 적용된 것을 확인할 수 있다.
 : js 에디터 부분에 작성하였던 스크립트는 body 태그 끝나는 지점에 append 시켜 문제없이 스크립트가 작동하도록 하였다.